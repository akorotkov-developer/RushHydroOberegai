<?php
class RhdTag
{
    protected static $people = array(

    );

    // Тэги-синонимы
    // Любой тэг из массива синонимов заменяется на первый элемент массива.
    protected static $similarTags = array(
        array('Саяно-Шушенская ГЭС', 'сшгэс'),
        array('ТПиР', 'программа тпир', 'тпир'),
        array('пкм', 'программа комплексной модернизации'),
        array('озп', 'осенне-зимний период'),
        array('вэс', 'ветроэлектростанция'),
        array('конкурс энергия воды', 'энергия воды'),
        array('ксо', 'корпоративная социальная отчетность'),
        array('рсбу', 'российский стандарт бухгалтерского учета'),
        array('мсфо', 'международный стандарт финансовой отчетности'),
        array('геотермальные станции', 'геотермальная станция'),
        array('гидрологические режимы', 'гидрологический режим'),
        array('пуски', 'пуск'),
        array('испытания', 'испытание'),
        array('веб-трансляции', 'веб-трансляция'),
        array('паводок', 'половодье', 'паводка', 'паводку', 'паводке', 'паводков', 'паводкам', 'паводками', 'половодью', 'половодья'),
        array('благотворительность, социальная ответственность',
            "Оберегай",
            "Заповедник",
            "Туристический маршрут",
            "Экологический маршрут",
            "Экологическая тропа",
            "Заповедник",
            "ООПТ",
            "Особо охраняемая природная территория",
            "Орлан",
            "Выдра",
            "Бобр",
            "журавль",
            "Болотная тропа",
            "Самарская лука",
            "Амурский государственный университет",
            "Выдрятник",
            "Свято-Тихоновский гуманитарный университет",
            "Конкурс студенческих работ «Энергия развития»",
            "Детская площадка",
            "Саяно-Шушенский филиал СФУ",
            "Спортивная площадка",
            "Волжский филиал Московского энергетического института",
            "Дворовая площадка",
            "Московский энергетический институт",
            "Детский сад",
            "Санкт-Петербургский государственный политехнический университет",
            "Детский дом",
            "Московский государственный строительный университет",
            "Чистая энергия детям",
            "Рожденные энергией",
            "Парус надежды",
            "Мой журавлик",
            "Футбольный клуб «Алания»",
            "Федерация гребного слалома России",
            "слалом",
            "«Иллюстрированные книжки для маленьких слепых детей»",
            "Программа комплексного развития инфраструктуры Черемушек",
            "ПКР",
            "С нами ярче и светлее",
            "Храм",
            "Церковь",
            "Колокол",
            "Купол",
            "Богородское подворье Свято-Троицкой Сергиевой Лавры",
            "строительство Храма в Богородском",
            "Интернат",
            "Школа",
            "Детский  сад",
            "Самая яркая елка",
            "Художественная галерея Дагестана «Первая галерея»",
            "Ученье – свет",
            "Посвящение в первоклассники",
            "Код энергии",
            "Помоги собраться в школу",
            "Поезд Деда Мороза",
            'благотворительный',
        )
    );

    // Группы тэгов
    // Если все тэги из значения элемента массива найдены, добавляется тэг, указанный в ключе элемента.
    // Если для тэга указано значение true, тэг удаляется из выборки.
    protected static $groupingTags = array(
        'авария на сшгэс' => array('авария' => true, 'саяно-шушенская гэс' => false),
    );

    protected static $tags = array(
        'альтернативная энергетика',
        'геотермальная энергетика',
        'геотермальные станции',
        'приливная энергетика',
        'ортогональная турбина',
        'собрание акционеров',
        'совет директоров',
        'годовой отчет',
        'председатель правления',
        'ревизионная комиссия',
        'заседание совета директоров',
        'гидрологический режим',
        'строительство',
        'испытание',
        'пуск',
        'инвестпрограмма',
        'ремонт',
        'веб-трансляция',
        'восстановление',
        'ввод в эксплуатацию',
        'перемаркировка',
        'энергоэффективность',
        'виэ',
        'возобновляемая энергетика',
        'оБЕРЕГАй',
        'социальная ответственность',
        'благотворительность',
        'отчет эмитента',
        'аффилированные лица',
        'существенные факты',
        'раскрытие информации',
        'ценные бумаги',
        'акционер',
        'устав',
        'эмиссия',
        'отчётность',
        'РусГидро',
        'УК ГидроОГК',
        'Волжская ГЭС',
        'Воткинская ГЭС',
        'Жигулевская ГЭС',
        'Камская ГЭС',
        'Каскад вв ГЭС',
        'Нижегородская ГЭС',
        'Саратовская ГЭС',
        'Чебоксарская ГЭС',
        'Новосибирская ГЭС',
        'Каскад Кубанских ГЭС',
        'Северо-Осетинский филиал',
        'Дагестанский филиал',
        'Сулакский гидрокаскад',
        'Ирганайская ГЭС',
        'Кабардино-Балкарский филиал',
        'Карачаево-Черкесский филиал',
        'Зейская ГЭС',
        'Нижне-зейская ГЭС',
        'Бурейская ГЭС',
        'Зеленчукская ГЭС-ГАЭС',
        'мы с вами Саяны',
        'Южно-якутский ГЭК',
        'Загорская ГАЭС',
        'Загорская ГАЭС-2',
        'Верхне-мутновская ГеоЭС',
        'Ленинградская ГАЭС',
        'Зарамагские ГЭС',
        'Прометей',
        'Усть-среднеканская ГЭС',
        'Усть-среднеканГЭСстрой',
        'Электроремонт-ВКК',
        'Гидроремонт-ВКК',
        'Турборемонт-ВКК',
        'НИИЭС',
        'РЭМИК',
        'ВНИИГ им. Б.Е.Веденеева',
        'Геотерм',
        'Паужетская ГеоЭС',
        'ЭСКО ЕЭС',
        'Ленгидропроект',
        'Колымаэнерго',
        'Мособлгидропроект',
        'инженерный центр возобновляемой энергетики',
        'Карачаево-черкесская гидрогенерирующая компания',
        'Гидроинвест',
        'Нижне-Бурейская ГЭС',
        'Нижне-Курейская ГЭС',
        'Саяно-Шушенский автотранспортный центр',
        'Саяно-Шушенский гидроэнергоремонт',
        'ЦСО Саяно-Шушенской ГЭС имени П.С.Непорожнего',
        'ЭСК РусГидро',
        'Дальневосточная ВЭС',
        'Корпоративный университет гидроэнергетки',
        'Гидроинжиниринг Сибирь',
        'Богучанская ГЭС',
        'Саяно-Шушенская ГЭС',
        'школа гидроэнергетика',

        'собрание акционеров',
        'совет директоров',
        'годовой отчет',
        'председатель правления',
        'правление',
        'ревизионная комиссия',
        'заседание совета директоров',

        'гидрологические режимы',
        'строительство',
        'испытания',
        'запуск',
        'ремонт',
        'авария',
        'ввод в эксплуатацию',

        'энергоэффективность',
        'энергосбережение',
        'виэ',
        'возобновляемая энергетика',

        'отчет эмитента',
        'аффилированные лица',
        'существенные факты',
        'раскрытие информации',
        'ценные бумаги',
        'акционер',
        'устав',
        'эмиссия',

        'стандарт',
        'проектирование',
        'эксплуатация',
        'дивиденды',

        'МВД',
        'долги',
        'кредитный рейтинг',
        'Standard & Poor\'s',
        'методика оценки соответствия гидроэнергетических проектов критериям устойчивого развития',
        'недобросовестные контрагенты',
        'развитие энергетики Дальнего Востока',
        'ТЭЦ в г. Советская Гавань',
        'Сахалинская ГРЭС-2',
        'Якутская ГРЭС-2',
        'Благовещенская ТЭЦ',
        'РАО ЭС Востока',
        'РусГидро ИТ сервис',
    );

    protected static $endings = array(
        // прилагатальные
        'ая' => '(?:.{0,3})(?:\s|$)',
        'ий' => '(?:.{0,3})(?:\s|$)',
        'ый' => '(?:.{0,3})(?:\s|$)',
        'ое' => '(?:.{0,3})(?:\s|$)',
        'ой' => '(?:.{0,3})(?:\s|$)',
        'ую' => '(?:.{0,3})(?:\s|$)',
        'ее' => '(?:.{0,3})(?:\s|$)',
        'ые' => '(?:.{0,3})(?:\s|$)',
        'ие' => '(?:.{0,3})(?:\s|$)',

        // существительные
        'а' => '(?:.{0,3})(?:\s|$)',
        'я' => '(?:.{0,3})(?:\s|$)',
    );

    protected static function loadPeopleTags()
    {
        $people = file(dirname(__FILE__).'/tags-people.txt');
        foreach ($people as $person) {
            $person =
                trim(
                    str_replace(
                        array("\r",	"\n"),
                        array('',	''),
                        $person
                    )
                );

            if (!$person) continue;

            $surname = preg_replace('/^([^\s]+).+$/ui', '\\1', $person);
            //$person = mb_strtolower($person);

            self::$people[] = $surname;
            self::$similarTags[] = array($person, $surname);
        }

        self::$people = array_unique(self::$people);
    }

    protected static function prepareSimilarTags()
    {
        foreach (self::$similarTags as $index => $group) {
            self::$similarTags[$index] = array_map(function ($tag) {
                //$tag = mb_strtolower($tag);
                $tag = trim($tag);
                $tag = preg_replace('/\s+/', ' ', $tag);

                return $tag;
            }, $group);
        }
    }

    protected static function mergeTags()
    {
        $existingTagsRs =
            CSearchTags::GetList(
                array(),
                array(
                    'SITE_ID' => SITE_ID,
                    'MODULE_ID' => 'iblock'
                )
            );

        $existingTags = array();
        while ($tag = $existingTagsRs->GetNext()) {
            $existingTags[] = $tag;
        }
        unset($existingTagsRs);

        $tags =
            array_merge(
                self::$tags,
                //self::$people,
                $existingTags
            );

        foreach (self::$similarTags as $tagGroup) {
            $tags =
                array_merge(
                    $tags,
                    $tagGroup
                );
        }

        foreach (self::$groupingTags as $tagGroup) {
            $tags =
                array_merge(
                    $tags,
                    array_keys($tagGroup)
                );
        }

        $tags =
            array_unique($tags);

        /*$tags =
            array_map('mb_strtolower', $tags);
        */

        return $tags;
    }

    protected static function buildRegexpForPart($part)
    {
        //$part = str_replace('-', '\-', $part);
        $endingRegexp = '/('.implode('|', array_keys(self::$endings)).')$/ie';
        $part = preg_replace($endingRegexp, '', $part);
        $part .= '(?:.{0,2})';

        return $part;
    }

    protected static function buildRegexpForTag($tag)
    {
        $parts = explode(' ', $tag);
        $regexp = '(?:^|\s)';
        foreach ($parts as $part) {
            if ($regexp) $regexp .= '(?:\s*(?:[^\s]+\s|)) {0,2}';
            $regexp .= self::buildRegexpForPart($part);
        }
        $regexp .= '(?:\s|$)';

        return $regexp;
    }

    public static function grabTags($body)
    {
        $body =
            preg_replace( '/&([a-z]+|#\d{2,4});/i' ,'',strip_tags($body));
        //strip_tags($body) old body
        /*$body =
            preg_replace(
                array('/[^a-zа-яА-Я0-9-]/iu',	'/\s+/iu'),
                array(' ',					' '),
                $body
            );
*/

        self::loadPeopleTags();
        self::prepareSimilarTags();

        $tags =
            self::mergeTags();

        $foundTags = array();
        foreach ($tags as $tag) {
            $regexp = '/('.(self::buildRegexpForTag($tag)).')/imu';
            if (preg_match($regexp, $body)) $foundTags[] = $tag;
        }

        /*var_dump($foundTags, self::$similarTags);
        die();*/

        // ищем тэги-синонимы и заменяем их на первый тэг в списке синонимов
        foreach (self::$similarTags as $tagGroup) {
            $lcTagGroup = array_map('mb_strtolower', $tagGroup);
            foreach ($foundTags as $tagIndex => $tag) {
                if (in_array(mb_strtolower($tag), $lcTagGroup)) $foundTags[$tagIndex] = $tagGroup[0];
            }
        }

        foreach (self::$groupingTags as $mainTag => $tagGroup) {
            if (!array_diff(array_keys($tagGroup), $foundTags)) {
                // полная группа
                $foundTags[] = $mainTag;
            }

            $removeTags = array();
            foreach ($tagGroup as $tag => $remove) {
                if ($remove) $removeTags[] = $tag;
            }

            $foundTags = array_diff($foundTags, $removeTags);

        }

        $foundTags = array_unique($foundTags);

        return $foundTags;
    }

}
